// Copyright © 2024 onwards, Andrew Whewell
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of the author nor the names of the program's contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OF THE SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

namespace VirtualRadar.Feed.BaseStation
{
    /// <summary>
    /// The content of a parsed BaseStation message.
    /// </summary>
    public class BaseStationMessage
    {
        /// <summary>
        /// Gets or sets the type of message.
        /// </summary>
        public string MessageType { get; set; }

        /// <summary>
        /// True if <see cref="MessageType"/> represents a transmission from an aircraft.
        /// </summary>
        public bool IsAircraftMessage => MessageType == "MSG" || MessageType == "MLAT";

        /// <summary>
        /// Gets or sets the type of transmission sent in a Transmission message.
        /// </summary>
        public string TransmissionType { get; set; }

        /// <summary>
        /// Gets or sets the status change in a StatusChanged message.
        /// </summary>
        public string StatusCode { get; set; }

        /// <summary>
        /// Gets or sets the Mode S identifier transmitted by the aircraft.
        /// </summary>
        public string Icao24 { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the BaseStation session.
        /// </summary>
        public int SessionId { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the aircraft in the BaseStation database.
        /// </summary>
        public int AircraftId { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the flight in the BaseStation database.
        /// </summary>
        public int FlightId { get; set; }

        /// <summary>
        /// Gets or sets the local date and time the message was generated by BaseStation.
        /// </summary>
        public DateTimeOffset MessageGenerated { get; set; }

        /// <summary>
        /// Gets or sets the local date and time that the message was logged by BaseStation.
        /// </summary>
        public DateTimeOffset MessageLogged { get; set; }

        /// <summary>
        /// Gets or sets the callsign of the aircraft, if known.
        /// </summary>
        public string Callsign { get; set; }

        /// <summary>
        /// Gets or sets the altitude of the aircraft, if known.
        /// </summary>
        public int? Altitude { get; set; }

        /// <summary>
        /// Gets or sets the speed over the ground of the aircraft, if known.
        /// </summary>
        public float? GroundSpeed { get; set; }

        /// <summary>
        /// Gets or sets the direction that the aircraft is heading in, if known.
        /// </summary>
        public float? Track { get; set; }

        /// <summary>
        /// Gets or sets the north (+ve) or south (-ve) coordinate for the aircraft.
        /// </summary>
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or sets the east (+ve) or west (-ve) coordinate for the aircraft.
        /// </summary>
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or sets the speed of ascent or descent.
        /// </summary>
        public int? VerticalRate { get; set; }

        /// <summary>
        /// Gets or sets the squawk code.
        /// </summary>
        public int? Squawk { get; set; }

        /// <summary>
        /// Gets or sets a value indicating that the squawk code has changed.
        /// </summary>
        public bool? SquawkHasChanged { get; set; }

        /// <summary>
        /// Gets or sets a value indicating that the squawk code is set to a value indicating an emergency.
        /// </summary>
        public bool? Emergency { get; set; }

        /// <summary>
        /// Gets or sets a value indicating that the aircraft's transponder ident has been activated.
        /// </summary>
        public bool? IdentActive { get; set; }

        /// <summary>
        /// Gets or sets a value indicating that the vehicle is on the ground.
        /// </summary>
        public bool? OnGround { get; set; }

        /// <summary>
        /// Gets or sets the message number for an archived message. Always zero for live messages.
        /// </summary>
        public int MessageNumber { get; set; }

        /// <summary>
        /// Returns the message as a BaseStation format message.
        /// </summary>
        public string ToBaseStationString()
        {
            var result = new StringBuilder();
            void appendWithComma(string content)
            {
                result.Append(content);
                result.Append(',');
            }
            void appendIntWithComma(int? value) => appendWithComma(value?.ToString(CultureInfo.InvariantCulture) ?? "");
            void appendDateWithComma(DateTime value) => appendWithComma(value.ToString("yyyy/MM/dd"));
            void appendTimeWithComma(DateTime value) => appendWithComma(value.ToString("HH:mm:ss.fff"));
            void appendBoolWithComma(bool? value) => appendWithComma(value == null ? "" : value.Value ? "-1" : "0");

            var messageGeneratedLocal = MessageGenerated.ToLocalTime().DateTime;
            var messageLoggedLocal = MessageLogged.ToLocalTime().DateTime;

            appendWithComma(MessageType);
            appendWithComma(TransmissionType);
            appendIntWithComma(SessionId);
            appendIntWithComma(AircraftId);
            appendWithComma(Icao24);
            appendIntWithComma(FlightId);
            appendDateWithComma(messageGeneratedLocal);
            appendTimeWithComma(messageGeneratedLocal);
            appendDateWithComma(messageLoggedLocal);
            appendTimeWithComma(messageLoggedLocal);
            appendWithComma(MessageType == "STA" ? StatusCode : Callsign);
            appendIntWithComma(Altitude);
            appendWithComma(Format.GroundSpeed.IsoRounded(GroundSpeed));
            appendWithComma(Format.Track.IsoRounded(Track));
            appendWithComma(Format.Latitude.IsoRounded(Latitude));
            appendWithComma(Format.Latitude.IsoRounded(Longitude));
            appendWithComma(Format.VerticalRate.IsoRounded(VerticalRate));
            appendWithComma(Format.Squawk.Base10AsBase8(Squawk));
            appendBoolWithComma(SquawkHasChanged);
            appendBoolWithComma(Emergency);
            appendBoolWithComma(IdentActive);
            appendBoolWithComma(OnGround.GetValueOrDefault());      // <-- BaseStation never emits a null for this

            return result.ToString();
        }
    }
}
